import logging
from openai import OpenAI
from app.core.config import settings
from app.core.decorators import retry_on_api_error
from app.core.constants import CHAT_TEMPERATURE, CHAT_MAX_TOKENS

logger = logging.getLogger(__name__)

# Initialize OpenAI client
client = OpenAI(api_key=settings.openai_api_key)


@retry_on_api_error()
def get_openai_answer(user_question: str) -> str:
    """
    Get an answer from OpenAI API when no local match is found.

    Automatically retries with exponential backoff on failure (configured in decorators.py).

    Args:
        user_question: The user's question

    Returns:
        Answer generated by OpenAI

    Raises:
        Exception: If API call fails after all retry attempts
    """
    response = client.chat.completions.create(
        model=settings.chat_model,
        messages=[
            {
                "role": "system",
                "content": (
                    "You are a helpful assistant answering questions about account management, "
                    "security, and user settings. Provide clear, concise, and accurate answers. "
                    "If you're unsure, provide general guidance."
                )
            },
            {
                "role": "user",
                "content": user_question
            }
        ],
        temperature=CHAT_TEMPERATURE,
        max_tokens=CHAT_MAX_TOKENS
    )

    answer = response.choices[0].message.content.strip()
    logger.info(f"Generated OpenAI answer for: '{user_question[:50]}...'")
    return answer
